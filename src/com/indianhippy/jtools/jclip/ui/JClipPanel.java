/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.indianhippy.jtools.jclip.ui;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DateFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Set;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import com.indianhippy.jtools.clip.data.ClipBoardHistoryStore;
import com.indianhippy.jtools.clip.helper.ClipBoardManager;
import com.indianhippy.jtools.clip.helper.ConfigReader;
import com.indianhippy.jtools.log.JToolsLogger;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author achava
 */
public class JClipPanel extends javax.swing.JPanel{

    /**
     * Creates new form MainForm
     */
    private static Logger logger = Logger.getLogger("JTools");
    ClipBoardHistoryStore clipHisDB = new ClipBoardHistoryStore();
    ClipBoardManager cboardmgr = new ClipBoardManager();
    
    public JClipPanel() {
         
        initComponents();
        
       
        jTablePopMenuCurrentClips();
        jTablePopMenuForOldClips();
        
    }

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTablePane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        clipBoardCurrentTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        findText = new javax.swing.JTextField();
        findButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        findResultTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        clipHistoryTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        oldClipsTable = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable1);

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        setLayout(new java.awt.GridLayout(1, 0));

        jTablePane1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jTablePane1ComponentHidden(evt);
            }
        });
        jTablePane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTablePane1FocusGained(evt);
            }
        });

        clipBoardCurrentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Clip", "Timestamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clipBoardCurrentTable.setRowHeight(20);
        clipBoardCurrentTable.getTableHeader().setReorderingAllowed(false);
        clipBoardCurrentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clipBoardCurrentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(clipBoardCurrentTable);
        if (clipBoardCurrentTable.getColumnModel().getColumnCount() > 0) {
            clipBoardCurrentTable.getColumnModel().getColumn(1).setMinWidth(100);
            clipBoardCurrentTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            clipBoardCurrentTable.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        jTablePane1.addTab("ClipBoard", jScrollPane1);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel1.setText("Search");
        jPanel2.add(jLabel1);

        findText.setMinimumSize(new java.awt.Dimension(100, 20));
        findText.setPreferredSize(new java.awt.Dimension(200, 20));
        findText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findTextActionPerformed(evt);
            }
        });
        findText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                findTextKeyPressed(evt);
            }
        });
        jPanel2.add(findText);

        findButton.setText("Find");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        jPanel2.add(findButton);

        jPanel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        findResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Clip", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        findResultTable.setRowHeight(20);
        findResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findResultTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(findResultTable);
        if (findResultTable.getColumnModel().getColumnCount() > 0) {
            findResultTable.getColumnModel().getColumn(1).setMinWidth(100);
            findResultTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            findResultTable.getColumnModel().getColumn(1).setMaxWidth(200);
        }

        jPanel3.add(jScrollPane6);

        jPanel1.add(jPanel3);

        jScrollPane4.setViewportView(jPanel1);

        jTablePane1.addTab("Find", jScrollPane4);

        clipHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "ClipHistory"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clipHistoryTable.setRowHeight(20);
        clipHistoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clipHistoryTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(clipHistoryTable);

        jTablePane1.addTab("ClipBoardHistory", jScrollPane2);

        oldClipsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Clip", "Timestamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        oldClipsTable.setRowHeight(20);
        oldClipsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                oldClipsTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(oldClipsTable);
        if (oldClipsTable.getColumnModel().getColumnCount() > 0) {
            oldClipsTable.getColumnModel().getColumn(0).setMinWidth(20);
            oldClipsTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            oldClipsTable.getColumnModel().getColumn(0).setMaxWidth(30);
            oldClipsTable.getColumnModel().getColumn(2).setMinWidth(100);
            oldClipsTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            oldClipsTable.getColumnModel().getColumn(2).setMaxWidth(200);
        }

        jTablePane1.addTab("Old ClipBoard", jScrollPane3);

        add(jTablePane1);
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        // TODO add your handling code here:
        

        try {
            //String data = (String) Toolkit.getDefaultToolkit().getSystemClipboard().getData(DataFlavor.stringFlavor); 
            //logger.info(data);
        } catch (Exception e) {
            logger.info(e.getMessage());
        }

    }//GEN-LAST:event_formFocusLost

    private void jTablePane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTablePane1FocusGained

        getHistoryTables();
        String myDate = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());
        clipHisDB.createTable("ClipHistory" + myDate.replaceAll("/", "_"));
        showClipsInCurrent();
    }//GEN-LAST:event_jTablePane1FocusGained

    private void jTablePane1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTablePane1ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jTablePane1ComponentHidden

    private void oldClipsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_oldClipsTableMouseClicked
        if (evt.getClickCount() == 2) {
            DefaultTableModel model = (DefaultTableModel) oldClipsTable.getModel();
            if (oldClipsTable.getSelectedRow() >= 0) {
                cboardmgr.setClipboardContents(oldClipsTable.getValueAt(oldClipsTable.getSelectedRow(), 1).toString());

                // String myDate = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());
                //clipHisDB.deleteRowFromTableBasedOnID("ClipHistory"+myDate.replaceAll("/", "_"), oldClipsTable.getValueAt(oldClipsTable.getSelectedRow(), 0).toString());
                //model.removeRow(clipBoardCurrentTable.getSelectedRow());
                //addFromClipBoard();
            }
        }
    }//GEN-LAST:event_oldClipsTableMouseClicked

    private void clipHistoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clipHistoryTableMouseClicked

        LinkedHashMap output[] = clipHisDB.getValuesFromTable(clipHistoryTable.getValueAt(clipHistoryTable.getSelectedRow(), clipHistoryTable.getSelectedColumn()).toString());
        if (output != null && output.length > 1) {
            LinkedHashMap<String, String> data = output[0];
            LinkedHashMap<String, String> timeStamp = output[1];
            Set<String> keys = data.keySet();
            int i = 0;
            DefaultTableModel model1 = (DefaultTableModel) oldClipsTable.getModel();
            for (int j = 0; j < model1.getRowCount(); j++) {
                model1.removeRow(j);
            }
            model1.setRowCount(keys.size() + 1);
            for (String key : keys) {
                String dataValue = data.get(key);
                String timeStampStr = timeStamp.get(key);
                try {

                    oldClipsTable.setValueAt(dataValue, i, 1);
                    oldClipsTable.setValueAt(key, i, 0);
                    oldClipsTable.setValueAt(timeStampStr, i, 2);

                    jTablePane1.setTitleAt(3, clipHistoryTable.getValueAt(clipHistoryTable.getSelectedRow(), clipHistoryTable.getSelectedColumn()).toString());

                    i++;
                } catch (Exception sqle) {
                    sqle.printStackTrace();
                }
            }

        }

        //logger.info(clipHistoryTable.getValueAt(clipHistoryTable.getSelectedRow(), clipHistoryTable.getSelectedColumn()).toString());
    }//GEN-LAST:event_clipHistoryTableMouseClicked

    private void findResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findResultTableMouseClicked
        if (evt.getClickCount() == 2) {
            DefaultTableModel model = (DefaultTableModel) findResultTable.getModel();
            if (findResultTable.getSelectedRow() >= 0) {
                cboardmgr.setClipboardContents(findResultTable.getValueAt(findResultTable.getSelectedRow(), 0).toString());

            }
        }
    }//GEN-LAST:event_findResultTableMouseClicked

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        startSearching();
    }//GEN-LAST:event_findButtonActionPerformed

    private void findTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextKeyPressed
        if (evt.getKeyCode() == 10) {
            startSearching();
        }
    }//GEN-LAST:event_findTextKeyPressed

    private void findTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findTextActionPerformed

    private void clipBoardCurrentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clipBoardCurrentTableMouseClicked
        if (evt.getClickCount() == 2) {
            DefaultTableModel model = (DefaultTableModel) clipBoardCurrentTable.getModel();
            if (clipBoardCurrentTable.getSelectedRow() >= 0) {

                cboardmgr.setClipboardContents(clipBoardCurrentTable.getValueAt(clipBoardCurrentTable.getSelectedRow(), 0).toString());
                String myDate = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());
                clipHisDB.deleteRowFromTable("ClipHistory" + myDate.replaceAll("/", "_"), clipBoardCurrentTable.getValueAt(clipBoardCurrentTable.getSelectedRow(), 0).toString(), clipBoardCurrentTable.getValueAt(clipBoardCurrentTable.getSelectedRow(), 1).toString());
                model.removeRow(clipBoardCurrentTable.getSelectedRow());

                addFromClipBoard();
            }
        }
    }//GEN-LAST:event_clipBoardCurrentTableMouseClicked

   

    private void startSearching() {
        if (!findText.getText().equals("")) {
            LinkedHashMap findResult[] = clipHisDB.findClipInDB(findText.getText());
            if (findResult != null && findResult.length > 1) {
                LinkedHashMap<String, String> data = findResult[0];
                LinkedHashMap<String, String> timeStamp = findResult[1];
                Set<String> keys = data.keySet();
                int i = 0;
                DefaultTableModel model1 = (DefaultTableModel) findResultTable.getModel();
                model1.setRowCount(keys.size() + 1);
                for (String key : keys) {
                    String dataValue = data.get(key);
                    String timeStampStr = timeStamp.get(key);
                    try {

                        findResultTable.setValueAt(dataValue, i, 0);
                        findResultTable.setValueAt(timeStampStr, i, 1);

                        i++;
                    } catch (Exception sqle) {
                        sqle.printStackTrace();
                    }
                }

            }
        }
    }

   

    public void jTablePopMenuCurrentClips() {
        final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Delete");
        deleteItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //logger.info(clipBoardCurrentTable.getSelectedRow());
                DefaultTableModel model = (DefaultTableModel) clipBoardCurrentTable.getModel();
                if (clipBoardCurrentTable.getSelectedRow() >= 0) {
                    //logger.info(clipBoardCurrentTable.getSelectedRow());

                    String myDate = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());
                    clipHisDB.deleteRowFromTable("ClipHistory" + myDate.replaceAll("/", "_"), clipBoardCurrentTable.getValueAt(clipBoardCurrentTable.getSelectedRow(), 0).toString(), clipBoardCurrentTable.getValueAt(clipBoardCurrentTable.getSelectedRow(), 1).toString());
                    model.removeRow(clipBoardCurrentTable.getSelectedRow());
                }
            }
        });
        popupMenu.add(deleteItem);
        clipBoardCurrentTable.setComponentPopupMenu(popupMenu);
    }

    public void jTablePopMenuForOldClips() {
        final JPopupMenu popupMenu1 = new JPopupMenu();
        JMenuItem deleteItem1 = new JMenuItem("Delete");
        deleteItem1.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                //logger.info(clipBoardCurrentTable.getSelectedRow());
                DefaultTableModel model = (DefaultTableModel) oldClipsTable.getModel();
                if (oldClipsTable.getSelectedRow() >= 0) {
                    //logger.info(clipBoardCurrentTable.getSelectedRow());

                    String myDate = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());
                    clipHisDB.deleteRowFromTable(clipHistoryTable.getValueAt(clipHistoryTable.getSelectedRow(), 0).toString(), oldClipsTable.getValueAt(oldClipsTable.getSelectedRow(), 1).toString(), oldClipsTable.getValueAt(oldClipsTable.getSelectedRow(), 2).toString());
                    model.removeRow(oldClipsTable.getSelectedRow());
                }
            }
        });
        popupMenu1.add(deleteItem1);
        oldClipsTable.setComponentPopupMenu(popupMenu1);
    }

    private void showClipsInCurrent() {
        String myDate = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());
        LinkedHashMap output[] = clipHisDB.getValuesFromTable("ClipHistory" + myDate.replaceAll("/", "_"));
        if (output != null && output.length > 1) {
            LinkedHashMap<String, String> data = output[0];
            LinkedHashMap<String, String> timeStamp = output[1];
            Set<String> keys = data.keySet();
            int i = 0;
            DefaultTableModel model1 = (DefaultTableModel) clipBoardCurrentTable.getModel();
            model1.setRowCount(keys.size() + 1);
            for (String key : keys) {
                String dataValue = data.get(key);
                String timeStampStr = timeStamp.get(key);
                try {

                    clipBoardCurrentTable.setValueAt(dataValue, i, 0);
                    clipBoardCurrentTable.setValueAt(timeStampStr, i, 1);

                    i++;
                } catch (Exception sqle) {
                    sqle.printStackTrace();
                }
            }

        }
    }

    private void getHistoryTables() {
        String clipHistoryFromDB[] = clipHisDB.getTablesFromDB();
        DefaultTableModel model = (DefaultTableModel) clipHistoryTable.getModel();
        model.setRowCount(clipHistoryFromDB.length);
        for (int i = 0; i < clipHistoryFromDB.length; i++) {
            clipHistoryTable.setValueAt(clipHistoryFromDB[i], i, 0);
        }
    }

    private void clearCurrentClips() {
        DefaultTableModel model1 = (DefaultTableModel) clipBoardCurrentTable.getModel();
        for (int j = 0; j < model1.getRowCount(); j++) {
            model1.removeRow(j);
        }
    }

    public void addFromClipBoard() {

        if (cboardmgr.getClipboardContents() != null && !cboardmgr.getClipboardContents().trim().equals("")) {
            int i = 0;
            boolean valueThere = false;
            while (clipBoardCurrentTable.getValueAt(i, 0) != null && !clipBoardCurrentTable.getValueAt(i, 0).toString().equals("")) {
                if ((cboardmgr.getClipboardContents()).equalsIgnoreCase(clipBoardCurrentTable.getValueAt(i, 0).toString())) {
                    valueThere = true;
                }
                i++;
            }
            DefaultTableModel model = (DefaultTableModel) clipBoardCurrentTable.getModel();
            if (i == clipBoardCurrentTable.getRowCount() - 1) {

                int h = clipBoardCurrentTable.getRowCount() + 1;
                model.setRowCount(h);

            }
            if (valueThere != true) {
                Date d = new Date();
                clipBoardCurrentTable.setValueAt(cboardmgr.getClipboardContents(), i, 0);
                clipBoardCurrentTable.setValueAt(d.toString(), i, 1);

                try {
                    String myDate = DateFormat.getDateInstance(DateFormat.SHORT).format(new Date());
                    clipHisDB.createTable("ClipHistory" + myDate.replaceAll("/", "_"));
                    //InputStream stream = new ByteArrayInputStream(cboardmgr.getClipboardContents().getBytes("UTF-8"));
                    clipHisDB.insertIntoTable("ClipHistory" + myDate.replaceAll("/", "_"), cboardmgr.getClipboardContents(), d.toString());
                    clearCurrentClips();
                    showClipsInCurrent();
                } catch (Exception ue) {
                    ue.printStackTrace();
                }
            } else {
                valueThere = false;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable clipBoardCurrentTable;
    private javax.swing.JTable clipHistoryTable;
    private javax.swing.JButton findButton;
    private javax.swing.JTable findResultTable;
    private javax.swing.JTextField findText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTabbedPane jTablePane1;
    private javax.swing.JTable oldClipsTable;
    // End of variables declaration//GEN-END:variables
}
